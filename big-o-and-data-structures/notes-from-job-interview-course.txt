Big-O asymptotic analysis
[ Big-O complexity ] 
Tells how well a problem is solved; Code performance and scalability 
Tells how long an algorithm takes to run
Tells how many oparations a task need to run

- Good code
 readable and reliable code is a good code
- Good code has a good readability, best/high execution speed, and uses a low amount of memory
scalability => time(speed) and memory
- Each pillar has a tradeoff

- Worst case => force the algorithm to run the maximum amount possible

- Indented => sum
- Nested => multiply

- Time complexity types

O(1) - constant time - excellent	

O(n) - linear time - proportional - fair
          Different inputs should have different variables

O(n^2) - quadratic time - horrible
	Nested loops

- Space complexity types
	What Causes Space Complexity?
		• Variables
		• Data Structures
		• Function Call
		• Allocations
 Was something created, called ? Then the memory is used, space complexity rises

Data structures

- ARRAYS
[Access O(n), Insert O(n), Deletion O(n), Search O(n)]

- HASH TABLES, hash maps, maps => Objects in JS
 [Access O(1), Insert O(1), Deletion O(1), Search O(1)]
	• hash => key
	• problems with collision and entry overflow

- LINKED LISTS => JS doesn't have a built-in linked list [Access O(n), Insert O(n), Deletion O(n)]
Build with objects in JS
Formed by nodes
A node includes two partes
	 a value
	a pointer that links to the next node value
The first node is called head. The last, tail
								
- STACK [Access O(n), pop O(1), push O(1), peek O(1)] - LIFO (last in, first out)
	-     <= operate on this one [Last item] [The frist to come out]
	-     <= then on this one
	-
	-
Can be build with both arrays and linked lists
browser history, ctrl+z
					pop the first in the queue
- QUEUES [Access O(n), dequeue O(1),  enqueue O(1), peek O(1)] - FIFO (first in, first out)
         | 	|	 |	 |	 |	 |	 |	 | 
	8	7	6	5	4	3	2	1
is build with linnked lists
Uber, printer

- TREES [Access O(log n), insert O(log n), delete O(log n)]
 • Root
 • Parent
 • Child
 • Sibling
 • Leaf (end of each branch)

	-- Binary tree
		• rules: each node can have zero, one, or two other children nodes
			    each child can have only one parent
		• the number of nodes in one level -  1 is equal to the number of nodes in the levels above
	
	-- Binary Search tree
		• rules: it is a full bynary tree (unbalanced)  [Access O(n), insert O(n), delete O(n)] 
		or perfect bynary tree (balanced) [Access O(log n), insert O(log n), delete O(log n)]
		• the child node on the right has a bigger value than its parent and its sibling on the left

	-- Binary Max/Min Heap [Access O(n), insert O(log n), delete O(log n)]
		• rules: the parent has to be bigger than its two children
		• the child node on the right has a bigger value than its parent and its sibling on the left
		• Bynary head data structure is different than memory Heap


DOM tree, facebook comment

- GRAPHS
 • Node
 • Edge


Linked lists -> Trees -> Graphs

	Directed: travell only in one direction
	Undirected: travell forwards and backwards

	Weighted: edges have values related to the connection
	Unweighted: edges have no value

	Cyclic: nodes are connected in a circular way
	Acyclic: a few nodes are out of the circle

- Recursion
	Problem: If there is no way to stop it, it can bring the stackoverflow problem, when there is not enough memory to process the call stack
	Base case: it is a safet guard to stop the recursion
	Identify the return case: what has to bubble up the call stack
	Usually you have two returns: the base case and the return case

	Steps:
		Find the base case
		Find the return case
		
	DrawBack: increases the stack space

	When it comes to trees or converting something into a tree, consider RECURSION

	If recursion is possible, so does an iterative solution

	Important algorithms: Merge and Quick sort
	Tree and Graph Transversal

- Sort algorithms
	Basic 
		 • Bubble sort => each iteration, move up (bubble up) the bigger value of the comparison

		 • Selection sort => select the smallest, compare to the whole array, place the smallest at the beginning

		 • Insertion sort => compare two items, if item[i+1] < item[i], swap them and swap the previous items until one item is bigger than the previous ( when it happens, stop and go to the next iteration)
			Good for the case when the list is small and almost sorted. Best case is O(n)
		
	Complex => devide and conquer & recursion techniques => O(n log n),
		 • Merge => one of the most efficient. Stable (if items are the same, keep the order)
		 • Quick => pivot for comparison. Realy good. If the pivot is the smallest, it is even better. Nasty space complexity of O(log N)

	When should you use each?
		Bubble sort? Never
		Selection sort? Never
		Insertion sort? If the list is small & almost sorted
		Merge sort? Worried about worst case scenarios? use it [ O( N log N) ]. Worried about memory? don't use it [ O(n) ] 
		Quick sort? Not worried about worst case? Pick it. One of the greatest, but picking the wrong pivot is nasty, worst case O(n^2). Better space complexity [ O(log n) ]

	NON-COMPARISON algorithms beat O(n log n) time complexity performance
		Use the way data is stored in computers, zeros and ones
		Only work with numbers (INTEGERS) in a restricted range
		• radix sort
		• counting sort

- Searching algorithms
	• Linear search => sequencially checks each item of the list until it maches one. The most common algorithm => O(n). For ordered list, bynary search is better
	• Binary search => Go to the meddle of the list, discart the smallest (left part). Repeat until the item is found => O(log n). Great for sorted list

	BFS and DFS => O(n)
	• Breadth first search (BFS) => left to right on each node, level by level	
		Nice for finding the smallest path
		Bad because it requires more memory				      

	• Depth first search (DFS) 	 => 	top to bottom, then back up to parent and check the other side}	
		Good because use less momory
		Good for determining whether a path existis
		Bad because can get slow
		Bad for deep trees

Interview
	Show that it is nice to be around you
	Don't be overreactive, be straight forwording

3 questions you will answers by your behavior during a non-technical interview
	Can you do the job?
	Can I work with you?
	Are you going to improve?

Your history has to have the 4 heroes
	Technical
	Success
	Leadership
	Challenge
	
	Write down two stories that contain these 4 heroes

Questions to the interviewr

	What was the biggest mistake you made during the first years of your carieer?
	Where do you see this company in the nest 3 years? I want to work for X, but you work for X and have a better knowledge than I do, so I would like to see where X is heading
	Why did you join X? Why do you work for X?
	Did you see your skills improve since you started working for X?
	What you wish someone told you when you started working for X?